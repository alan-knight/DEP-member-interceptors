// Copyright (c) 2015, the Dart project authors.  Please see the AUTHORS file
// for details. All rights reserved. Use of this source code is governed by a
// BSD-style license that can be found in the LICENSE file.

/// Snippets of code generated by all transformers.
library interceptor.transformer.src.snippets;

String emitInterceptorImport() =>
  "\nimport 'package:interceptor/interceptor.dart' as _interceptor;";

String emitGetter(type, name, interceptor, bool isInstance) => '''\n
  $type get $name =>
      $interceptor.get(${isInstance ? "this" : "null"}, const __\$${name}_member());
''';

String emitSetter(type, name, interceptor, bool isInstance) => '''\n
  set $name($type __v) {
    $interceptor.set(${isInstance ? "this" : "null"}, __v, const __\$${name}_member());
  }
''';

String emitFlatGetter(type, name, interceptor, bool isInstance) => '''\n
  $type get $name =>
      $interceptor.read(${isInstance ? "this" : "null"}, #$name, () => __\$$name, (v) { __\$$name = v;});
''';


String emitFlatSetter(type, name, interceptor, bool isInstance) => '''\n
  set $name($type __v) {
    $interceptor.write(${isInstance ? "this" : "null"}, #$name, __v, () => __\$$name, (v) { __\$$name = v;});
  }
''';

// TODO(sigmund): use isInstance here, the checks for target == null are
// incorrect.
String emitMemberClass(name) => '''\n
class __\$${name}_member extends _interceptor.Member {
  const __\$${name}_member() : super(#$name);
  get(target) => target == null ? __\$$name : target.__\$$name;
  set(target, value) {
     if (target == null) {
       __\$$name = value;
     } else {
       target.__\$$name = value;
     }
  }
  invoke(target, List p, Map<Symbol, dynamic> n) {
    throw "Not implemented";
  }
}''';

